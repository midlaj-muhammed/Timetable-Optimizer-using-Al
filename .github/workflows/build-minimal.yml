name: 🚀 Build Timetable Optimizer AI (Minimal)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - release

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=false

jobs:
  build:
    name: 📱 Build Android APK (Minimal Dependencies)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🤖 Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 11076708
        
    - name: 📦 Cache Gradle Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-minimal-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-minimal-
          
    - name: 🔧 Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        
    - name: 🛡️ Grant Execute Permission for gradlew
      run: chmod +x gradlew
      
    - name: 🔧 Setup Gradle Wrapper (Force Download)
      run: |
        echo "Setting up Gradle wrapper from scratch..."
        rm -rf gradle/wrapper/gradle-wrapper.jar
        mkdir -p gradle/wrapper
        curl -L -o gradle/wrapper/gradle-wrapper.jar "https://github.com/gradle/gradle/raw/v8.2/gradle/wrapper/gradle-wrapper.jar"
        
        if [ -f "gradle/wrapper/gradle-wrapper.jar" ]; then
          echo "✅ gradle-wrapper.jar downloaded successfully"
          ls -la gradle/wrapper/gradle-wrapper.jar
        else
          echo "❌ Failed to download gradle-wrapper.jar"
          exit 1
        fi
        
        chmod +x gradlew
        
    - name: 🧹 Clean Project
      run: ./gradlew clean --no-daemon --stacktrace
      
    - name: 🔨 Build Debug APK
      if: ${{ github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == '' }}
      run: |
        echo "Building debug APK with minimal configuration..."
        ./gradlew assembleDebug --no-daemon --stacktrace --info
        
    - name: 🏗️ Build Release APK
      if: ${{ github.event.inputs.build_type == 'release' }}
      run: |
        echo "Building release APK with minimal configuration..."
        ./gradlew assembleRelease --no-daemon --stacktrace --info
        
    - name: 📋 List Generated APKs
      run: |
        echo "Generated APK files:"
        find app/build/outputs/apk -name "*.apk" -type f -exec ls -lh {} \; || echo "No APK files found"
        
    - name: 📤 Upload Debug APK
      if: ${{ github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == '' }}
      uses: actions/upload-artifact@v4
      with:
        name: 🐛 TimetableOptimizer-Debug-APK-Minimal
        path: app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30
        if-no-files-found: warn
        
    - name: 📤 Upload Release APK
      if: ${{ github.event.inputs.build_type == 'release' }}
      uses: actions/upload-artifact@v4
      with:
        name: 🚀 TimetableOptimizer-Release-APK-Minimal
        path: app/build/outputs/apk/release/app-release-unsigned.apk
        retention-days: 30
        if-no-files-found: warn
        
    - name: 📊 Build Summary
      if: always()
      run: |
        echo "## 📱 Build Summary (Minimal Configuration)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          DEBUG_SIZE=$(du -h app/build/outputs/apk/debug/app-debug.apk | cut -f1)
          echo "✅ **Debug APK**: Built successfully (Size: $DEBUG_SIZE)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Debug APK**: Build failed or not requested" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
          RELEASE_SIZE=$(du -h app/build/outputs/apk/release/app-release-unsigned.apk | cut -f1)
          echo "✅ **Release APK**: Built successfully (Size: $RELEASE_SIZE)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Release APK**: Build failed or not requested" >> $GITHUB_STEP_SUMMARY
        fi
