name: 🚀 Build Timetable Optimizer AI (Direct Gradle)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'both'
        type: choice
        options:
        - debug
        - release
        - both

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2
  ANDROID_COMPILE_SDK: "34"
  ANDROID_BUILD_TOOLS: "34.0.0"
  ANDROID_SDK_TOOLS: "11076708"

jobs:
  build:
    name: 📱 Build Android APK (Direct Gradle)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 🤖 Setup Android SDK (Manual)
      run: |
        echo "Setting up Android SDK manually..."
        
        # Set Android SDK path
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        mkdir -p $ANDROID_HOME
        
        # Download Android command line tools
        cd $ANDROID_HOME
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip -O cmdline-tools.zip
        unzip -q cmdline-tools.zip
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
        rm cmdline-tools.zip
        
        # Set PATH
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
        
        # Accept licenses
        yes | sdkmanager --licenses || true
        
        # Install required SDK components
        sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" \
                   "platform-tools" \
                   "build-tools;${ANDROID_BUILD_TOOLS}"
        
        # Add to GitHub environment
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
        
    - name: 🔧 Install Gradle Directly
      run: |
        echo "Installing Gradle directly..."
        
        # Download and install Gradle
        GRADLE_VERSION="8.2"
        cd /tmp
        wget -q https://services.gradle.org/distributions/gradle-${GRADLE_VERSION}-bin.zip
        unzip -q gradle-${GRADLE_VERSION}-bin.zip
        sudo mv gradle-${GRADLE_VERSION} /opt/gradle
        
        # Add to PATH
        echo "/opt/gradle/bin" >> $GITHUB_PATH
        export PATH=$PATH:/opt/gradle/bin
        
        # Verify installation
        /opt/gradle/bin/gradle --version
        
    - name: 📦 Cache Gradle Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.android/build-cache
        key: ${{ runner.os }}-gradle-direct-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-direct-
          
    - name: 🔧 Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        echo "Created local.properties with ANDROID_HOME: $ANDROID_HOME"
        
    - name: 📊 Display Build Environment
      run: |
        echo "Java Version:"
        java -version
        echo "Android SDK: $ANDROID_HOME"
        echo "Gradle Version:"
        gradle --version
        echo "Available SDK Platforms:"
        ls -la $ANDROID_HOME/platforms/ || echo "No platforms found"
        echo "Available Build Tools:"
        ls -la $ANDROID_HOME/build-tools/ || echo "No build tools found"
        
    - name: 🧹 Clean Project
      run: gradle clean
      
    - name: 🔨 Build Debug APK
      if: ${{ github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '' }}
      run: |
        echo "Building debug APK..."
        gradle assembleDebug --stacktrace --info
        
    - name: 🏗️ Build Release APK
      if: ${{ github.event.inputs.build_type == 'release' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '' }}
      run: |
        echo "Building release APK..."
        gradle assembleRelease --stacktrace --info
        
    - name: 📋 List Generated APKs
      run: |
        echo "Generated APK files:"
        find app/build/outputs/apk -name "*.apk" -type f -exec ls -lh {} \; || echo "No APK files found"
        
    - name: 📤 Upload Debug APK
      if: ${{ github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '' }}
      uses: actions/upload-artifact@v4
      with:
        name: 🐛 TimetableOptimizer-Debug-APK-Direct
        path: app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30
        if-no-files-found: warn
        
    - name: 📤 Upload Release APK
      if: ${{ github.event.inputs.build_type == 'release' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '' }}
      uses: actions/upload-artifact@v4
      with:
        name: 🚀 TimetableOptimizer-Release-APK-Direct
        path: app/build/outputs/apk/release/app-release-unsigned.apk
        retention-days: 30
        if-no-files-found: warn
        
    - name: 📊 Build Summary
      if: always()
      run: |
        echo "## 📱 Build Summary (Direct Gradle)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          DEBUG_SIZE=$(du -h app/build/outputs/apk/debug/app-debug.apk | cut -f1)
          echo "✅ **Debug APK**: Built successfully (Size: $DEBUG_SIZE)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Debug APK**: Build failed or not requested" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
          RELEASE_SIZE=$(du -h app/build/outputs/apk/release/app-release-unsigned.apk | cut -f1)
          echo "✅ **Release APK**: Built successfully (Size: $RELEASE_SIZE)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Release APK**: Build failed or not requested" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📥 Download Instructions:" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to the **Artifacts** section below" >> $GITHUB_STEP_SUMMARY
        echo "2. Download the APK file(s)" >> $GITHUB_STEP_SUMMARY
        echo "3. Transfer to your Android device" >> $GITHUB_STEP_SUMMARY
        echo "4. Enable 'Install from Unknown Sources'" >> $GITHUB_STEP_SUMMARY
        echo "5. Install the APK" >> $GITHUB_STEP_SUMMARY
