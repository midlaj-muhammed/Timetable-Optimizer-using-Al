name: 🚀 Build Timetable Optimizer AI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'both'
        type: choice
        options:
        - debug
        - release
        - both

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2
  JAVA_HOME_17_X64: ${{ env.JAVA_HOME }}
  SKIP_JDK_VERSION_CHECK: true

jobs:
  build:
    name: 📱 Build Android APK
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 🤖 Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 11076708

    - name: 📦 Cache Gradle Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.android/build-cache
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: 🔧 Create local.properties
      run: |
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        echo "Created local.properties with ANDROID_HOME: $ANDROID_HOME"

    - name: 🛡️ Grant Execute Permission for gradlew
      run: chmod +x gradlew

    - name: 🔧 Verify Gradle Wrapper
      run: |
        echo "Checking Gradle wrapper files..."
        if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
          echo "❌ gradle-wrapper.jar missing, downloading..."
          mkdir -p gradle/wrapper
          curl -L -o gradle/wrapper/gradle-wrapper.jar "https://github.com/gradle/gradle/raw/v8.2/gradle/wrapper/gradle-wrapper.jar"
          echo "✅ gradle-wrapper.jar downloaded"
        else
          echo "✅ gradle-wrapper.jar exists"
        fi

        echo "Gradle wrapper files:"
        ls -la gradle/wrapper/

    - name: 🧹 Clean Project
      run: ./gradlew clean

    - name: 🔍 Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: 📊 Display Build Environment
      run: |
        echo "Java Version: $(java -version)"
        echo "Android SDK: $ANDROID_HOME"
        echo "Gradle Version: $(./gradlew --version)"
        echo "Available SDK Platforms:"
        ls -la $ANDROID_HOME/platforms/ || echo "No platforms found"

    - name: 🔨 Build Debug APK
      if: ${{ github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '' }}
      run: |
        echo "Building debug APK..."
        ./gradlew assembleDebug --stacktrace --info

    - name: 🏗️ Build Release APK
      if: ${{ github.event.inputs.build_type == 'release' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '' }}
      run: |
        echo "Building release APK..."
        ./gradlew assembleRelease --stacktrace --info

    - name: 📋 List Generated APKs
      run: |
        echo "Generated APK files:"
        find app/build/outputs/apk -name "*.apk" -type f -exec ls -lh {} \;

    - name: 📤 Upload Debug APK
      if: ${{ github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '' }}
      uses: actions/upload-artifact@v4
      with:
        name: 🐛 TimetableOptimizer-Debug-APK
        path: app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30

    - name: 📤 Upload Release APK
      if: ${{ github.event.inputs.build_type == 'release' || github.event.inputs.build_type == 'both' || github.event.inputs.build_type == '' }}
      uses: actions/upload-artifact@v4
      with:
        name: 🚀 TimetableOptimizer-Release-APK
        path: app/build/outputs/apk/release/app-release-unsigned.apk
        retention-days: 30

    - name: 📊 Build Summary
      if: always()
      run: |
        echo "## 📱 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          DEBUG_SIZE=$(du -h app/build/outputs/apk/debug/app-debug.apk | cut -f1)
          echo "✅ **Debug APK**: Built successfully (Size: $DEBUG_SIZE)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Debug APK**: Build failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
          RELEASE_SIZE=$(du -h app/build/outputs/apk/release/app-release-unsigned.apk | cut -f1)
          echo "✅ **Release APK**: Built successfully (Size: $RELEASE_SIZE)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Release APK**: Build failed" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📥 Download Instructions:" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to the **Artifacts** section below" >> $GITHUB_STEP_SUMMARY
        echo "2. Download the APK file(s)" >> $GITHUB_STEP_SUMMARY
        echo "3. Transfer to your Android device" >> $GITHUB_STEP_SUMMARY
        echo "4. Enable 'Install from Unknown Sources'" >> $GITHUB_STEP_SUMMARY
        echo "5. Install the APK" >> $GITHUB_STEP_SUMMARY
